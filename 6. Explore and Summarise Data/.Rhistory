) +
geom_histogram(binwidth = 0.05) +
coord_cartesian(xlim = c(0, 2))
ggplot(
data = loans,
aes(x = DebtToIncomeRatio)
) +
geom_histogram(binwidth = 0.05) +
coord_cartesian(xlim = c(0, 1.5))
ggplot(
data = loans,
aes(x = DebtToIncomeRatio)
) +
geom_histogram(binwidth = 0.05) +
scale_x_continuous(limits = c(0, 1.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
ggplot(
data = loans,
aes(x = DebtToIncomeRatio)
) +
geom_histogram(binwidth = 0.05) +
scale_x_continuous(limits = c(0, 1.5), breaks = seq(0, 1.5, 0.05)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
ggplot(
data = loans,
aes(x = DebtToIncomeRatio)
) +
geom_histogram(binwidth = 0.05) +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.05)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
ggplot(
data = loans,
aes(x = DebtToIncomeRatio)
) +
geom_histogram(binwidth = 0.05) +
scale_x_continuous(breaks = seq(0, 1, 0.05)) +
coord_cartesian(xlim = c(0, 1)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
ggplot(
data = subset(loans, !is.na(ListingCategory)),
aes(x = ListingCategory, y = LoanOriginalAmount / Investors)
) +
geom_boxplot() +
scale_y_continuous(breaks = seq(0, max(loans$LoanOriginalAmount), 5000)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# Load the Data
loans <- read.csv('prosperLoanData.csv')
loans <- loans %>%
mutate(
ListingCreationDate = ListingCreationDate %>%
strptime('%Y-%m-%d %H:%M:%S') %>%
as.POSIXct(origin = lubridate::origin),
ClosedDate = ClosedDate %>%
strptime('%Y-%m-%d %H:%M:%S') %>%
as.POSIXct(origin = lubridate::origin),
DateCreditPulled = DateCreditPulled %>%
strptime('%Y-%m-%d %H:%M:%S') %>%
as.POSIXct(origin = lubridate::origin),
LoanOriginationDate = LoanOriginationDate %>%
strptime('%Y-%m-%d %H:%M:%S') %>%
as.POSIXct(origin = lubridate::origin),
FirstRecordedCreditLine = FirstRecordedCreditLine %>%
strptime('%Y-%m-%d %H:%M:%S') %>%
as.POSIXct(origin = lubridate::origin),
IncomeRange = ordered(
IncomeRange,
levels = c( # ommit "Not employed", "Not displayed"
"$0",
"$1-24,999",
"$25,000-49,999",
"$50,000-74,999",
"$75,000-99,999",
"$100,000+"
)
),
ProsperRating..Alpha. = ordered(
ProsperRating..Alpha.,
levels = c("HR", "E", "D", "C", "B", "A", "AA")
),
CreditGrade = ordered( # let's assume same order as ProsperRating
CreditGrade,
levels = c("NC", "HR", "E", "D", "C", "B", "A", "AA")
),
LoanOriginationQuarter = ordered(
LoanOriginationQuarter,
levels = loan.origination.quarter.levels
),
ListingCategory = factor(
loans$ListingCategory..numeric.,
levels = ListingCategory.levels,
labels = ListingCategory.labels
),
IncomeVerifiable = IncomeVerifiable == "True",
CurrentlyInGroup = CurrentlyInGroup == "True",
IsBorrowerHomeowner = IsBorrowerHomeowner == "True",
# joined column for credit grade and prosper rating under assumption,
# that same codes stand for same categories
CreditGrade.ProsperRating = coalesce(CreditGrade, ProsperRating..Alpha.),
# let's make ordeder factor for past due days
past.due.days = ordered(LoanStatus, levels = past.due.days.levels)
)
ggplot(
data = subset(loans, !is.na(ListingCategory)),
aes(x = ListingCategory, y = LoanOriginalAmount / Investors)
) +
geom_boxplot() +
scale_y_continuous(breaks = seq(0, max(loans$LoanOriginalAmount), 5000)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
ggplot(
data = loans,
aes(x = IncomeVerifiable, y = BorrowerIncome)
) +
geom_jitter()
ggplot(
data = loans,
aes(x = IncomeVerifiable, y = StatedIncome)
) +
geom_jitter()
ggplot(
data = loans,
aes(x = IncomeVerifiable, y = StatedMonthlyIncome)
) +
geom_jitter()
ggplot(
data = loans,
aes(x = IncomeVerifiable, y = StatedMonthlyIncome)
) +
geom_boxplot()
ggplot(
data = loans,
aes(x = IncomeVerifiable, y = StatedMonthlyIncome)
) +
geom_boxplot() +
coord_cartesian(ylim = c(0, 100000))
ggplot(
data = loans,
aes(x = IncomeVerifiable, y = StatedMonthlyIncome)
) +
geom_boxplot() +
coord_cartesian(ylim = c(0, 50000))
ggplot(
data = loans,
aes(x = IncomeVerifiable, y = StatedMonthlyIncome)
) +
geom_boxplot() +
coord_cartesian(ylim = c(0, 25000))
ggplot(
data = loans,
aes(x = IncomeVerifiable, y = StatedMonthlyIncome)
) +
geom_boxplot() +
coord_cartesian(ylim = c(0, 15000))
ggplot(
data = loans,
aes(x = IncomeVerifiable, y = StatedMonthlyIncome)
) +
geom_jitter() +
coord_cartesian(ylim = c(0, 15000))
ggplot(
data = loans,
aes(x = IncomeVerifiable, y = StatedMonthlyIncome)
) +
geom_jitter(aes(colour = Occupation)) +
scale_color_brewer() +
coord_cartesian(ylim = c(0, 15000))
ggplot(
data = subset(loans, Investors <= quantile(Investors, 0.99) & !is.na(ListingCategory)),
aes(x = ListingCategory, y = LoanOriginalAmount)
) +
geom_jitter(aes(colour = Investors)) +
scale_color_gradient() +
scale_y_continuous(breaks = seq(0, max(loans$LoanOriginalAmount), 5000)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
library(ggplot2)
library(dplyr)
library(stringr)
library(lubridate)
library(RColorBrewer)
# Load the Data
loans <- read.csv('prosperLoanData.csv')
# The category of the listing that the borrower selected when posting their listing: 0 - Not Available, 1 - Debt Consolidation, 2 - Home Improvement, 3 - Business, 4 - Personal Loan, 5 - Student Use, 6 - Auto, 7- Other, 8 - Baby&Adoption, 9 - Boat, 10 - Cosmetic Procedure, 11 - Engagement Ring, 12 - Green Loans, 13 - Household Expenses, 14 - Large Purchases, 15 - Medical/Dental, 16 - Motorcycle, 17 - RV, 18 - Taxes, 19 - Vacation, 20 - Wedding Loans
ListingCategory.levels = 1:20
ListingCategory.labels = c(
# "Not Available",
"Debt Consolidation",
"Home Improvement",
"Business",
"Personal Loan",
"Student Use",
"Auto",
"Other",
"Baby&Adoption",
"Boat",
"Cosmetic Procedure",
"Engagement Ring",
"Green Loans",
"Household Expenses",
"Large Purchases",
"Medical/Dental",
"Motorcycle",
"RV",
"Taxes",
"Vacation",
"Wedding Loans"
)
loan.origination.quarter.levels <- levels(loans$LoanOriginationQuarter) %>%
strsplit(' ') %>%
lapply(rev) %>%
lapply(paste, collapse = ' ') %>%
unlist() %>%
sort() %>%
strsplit(' ') %>%
lapply(rev) %>%
lapply(paste, collapse = ' ') %>%
unlist()
past.due.days.levels = c(
"Past Due (1-15 days)",
"Past Due (16-30 days)",
"Past Due (31-60 days)",
"Past Due (61-90 days)",
"Past Due (91-120 days)",
"Past Due (>120 days)"
)
loans <- loans %>%
mutate(
ListingCreationDate = ListingCreationDate %>%
strptime('%Y-%m-%d %H:%M:%S') %>%
as.POSIXct(origin = lubridate::origin),
ClosedDate = ClosedDate %>%
strptime('%Y-%m-%d %H:%M:%S') %>%
as.POSIXct(origin = lubridate::origin),
DateCreditPulled = DateCreditPulled %>%
strptime('%Y-%m-%d %H:%M:%S') %>%
as.POSIXct(origin = lubridate::origin),
LoanOriginationDate = LoanOriginationDate %>%
strptime('%Y-%m-%d %H:%M:%S') %>%
as.POSIXct(origin = lubridate::origin),
FirstRecordedCreditLine = FirstRecordedCreditLine %>%
strptime('%Y-%m-%d %H:%M:%S') %>%
as.POSIXct(origin = lubridate::origin),
IncomeRange = ordered(
IncomeRange,
levels = c( # ommit "Not employed", "Not displayed"
"$0",
"$1-24,999",
"$25,000-49,999",
"$50,000-74,999",
"$75,000-99,999",
"$100,000+"
)
),
ProsperRating..Alpha. = ordered(
ProsperRating..Alpha.,
levels = c("HR", "E", "D", "C", "B", "A", "AA")
),
CreditGrade = ordered( # let's assume same order as ProsperRating
CreditGrade,
levels = c("NC", "HR", "E", "D", "C", "B", "A", "AA")
),
LoanOriginationQuarter = ordered(
LoanOriginationQuarter,
levels = loan.origination.quarter.levels
),
ListingCategory = factor(
loans$ListingCategory..numeric.,
levels = ListingCategory.levels,
labels = ListingCategory.labels
),
IncomeVerifiable = IncomeVerifiable == "True",
CurrentlyInGroup = CurrentlyInGroup == "True",
IsBorrowerHomeowner = IsBorrowerHomeowner == "True",
# joined column for credit grade and prosper rating under assumption,
# that same codes stand for same categories
CreditGrade.ProsperRating = coalesce(CreditGrade, ProsperRating..Alpha.),
# let's make ordeder factor for past due days
past.due.days = ordered(LoanStatus, levels = past.due.days.levels)
)
str(loans)
summary(loans)
ggplot(
data = loans,
aes(x = ListingCreationDate)
) +
geom_histogram(binwidth = 60 * 60 * 24 * 30) +
scale_x_datetime(date_breaks = "1 year", date_labels = "%Y")
ggplot(
data = loans,
aes(x = LoanOriginalAmount)
) +
geom_histogram(binwidth = 1000) +
scale_x_continuous(breaks = seq(0, max(loans$LoanOriginalAmount), 5000))
ggplot(
data = subset(loans, StatedMonthlyIncome <= 50000),
aes(x = StatedMonthlyIncome)
) +
geom_histogram() +
scale_x_sqrt(breaks = seq(0, 50000, 2000)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
ggplot(
data = loans,
aes(x = BorrowerRate)
) +
geom_histogram(binwidth = 0.01)
ggplot(
data = loans,
aes(x = BorrowerAPR)
) +
geom_histogram(binwidth = 0.01)
ggplot(
data = loans,
aes(x = LenderYield)
) +
geom_histogram()
ggplot(
data = loans,
aes(x = DebtToIncomeRatio)
) +
geom_histogram(binwidth = 0.1) +
scale_x_sqrt(breaks = seq(0, 10, 0.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
ggplot(
data = loans,
aes(x = DebtToIncomeRatio)
) +
geom_histogram(binwidth = 0.05) +
scale_x_continuous(breaks = seq(0, 1, 0.05)) +
coord_cartesian(xlim = c(0, 1)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
ggplot(
data = loans,
aes(x = as.character(Term))
) +
geom_bar()
ggplot(
data = loans,
aes(x = Investors)
) +
geom_histogram()
ggplot(
data = loans,
aes(x = ListingCategory)
) +
geom_bar() +
scale_y_sqrt(breaks = seq(0, 60000, 6000)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
ggplot(
data = subset(loans, Occupation != ""),
aes(x = Occupation)
) +
geom_bar() +
scale_y_sqrt() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
ggplot(
data = loans,
aes(x = IncomeRange)
) +
geom_bar()
ggplot(
data = loans,
aes(x = PercentFunded)
) +
geom_histogram(binwidth = 0.02) +
scale_x_continuous(breaks = seq(0.6, 1.1, 0.02)) +
scale_y_sqrt(breaks = seq(0, 120000, 6000))
ggplot(
data = loans,
aes(x = Recommendations)
) +
geom_histogram(binwidth = 1) +
scale_x_continuous(breaks = seq(0, 40, 5)) +
scale_y_sqrt(breaks = seq(0, 120000, 6000))
ggplot(
data = subset(loans, !is.na(past.due.days)),
aes(x = past.due.days)
) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
ggplot(
data = loans,
aes(x = IsBorrowerHomeowner)
) +
geom_bar()
ggplot(
data = loans,
aes(x = CurrentlyInGroup)
) +
geom_bar()
ggplot(
data = loans,
aes(x = IncomeVerifiable)
) +
geom_bar()
ggplot(
data = loans,
aes(x = IncomeVerifiable, y = StatedMonthlyIncome)
) +
geom_boxplot()
ggplot(
data = loans,
aes(x = IncomeVerifiable, y = StatedMonthlyIncome)
) +
geom_boxplot() +
coord_cartesian(ylim = c(0, 15000))
ggplot(
data = loans,
aes(x = LoanOriginalAmount, y = Investors)
) +
geom_point(alpha = 0.05) +
scale_x_continuous(breaks = seq(0, max(loans$LoanOriginalAmount), 5000))
ggplot(
data = loans,
aes(x = ListingCreationDate, y = LoanOriginalAmount)
) +
geom_point(alpha = 0.05) +
scale_y_continuous(breaks = seq(0, max(loans$LoanOriginalAmount), 5000)) +
scale_x_datetime(date_breaks = "1 year", date_labels = "%Y")
ggplot(
data = loans,
aes(x = as.character(Term), y = LoanOriginalAmount)
) +
geom_boxplot()
ggplot(
data = loans,
aes(x = LoanOriginalAmount, y = PercentFunded)
) +
geom_point(alpha = 0.05) +
scale_x_continuous(breaks = seq(0, max(loans$LoanOriginalAmount), 5000)) +
scale_y_continuous(breaks = seq(0.7, 1, 0.05))
ggplot(
data = loans,
aes(x = Investors, y = PercentFunded)
) +
geom_jitter(alpha = 0.05) +
scale_x_continuous(breaks = seq(0, 1200, 100)) +
scale_y_continuous(breaks = seq(0.7, 1, 0.05))
ggplot(
data = subset(loans, !is.na(CreditGrade.ProsperRating)),
aes(x = CreditGrade.ProsperRating, y = LoanOriginalAmount)
) +
geom_boxplot() +
scale_y_continuous(breaks = seq(0, max(loans$LoanOriginalAmount), 5000))
ggplot(
data = loans,
aes(x = ListingCategory, y = LoanOriginalAmount)
) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
ggplot(
data = loans,
aes(x = BorrowerAPR, y = BorrowerRate)
) +
geom_point(alpha = 0.05)
ggplot(
data = loans,
aes(x = IsBorrowerHomeowner, LoanOriginalAmount)
) +
geom_boxplot()
ggplot(
data = loans,
aes(x = CurrentlyInGroup, LoanOriginalAmount)
) +
geom_boxplot()
ggplot(
data = loans,
aes(x = IncomeVerifiable, LoanOriginalAmount)
) +
geom_boxplot()
ggplot(
data = subset(loans, !is.na(CreditGrade.ProsperRating)),
aes(x = CreditGrade.ProsperRating, y = LoanOriginalAmount / Investors)
) +
geom_boxplot() +
scale_y_continuous(breaks = seq(0, max(loans$LoanOriginalAmount), 5000))
ggplot(
data = subset(loans, Investors <= quantile(Investors, 0.99)),
aes(x = LoanOriginalAmount, y = PercentFunded)
) +
geom_point(aes(colour = Investors)) +
scale_colour_gradient(low = I("#000066"), high = I("#ffffff")) +
scale_x_continuous(breaks = seq(0, max(loans$LoanOriginalAmount), 5000)) +
scale_y_continuous(breaks = seq(0.7, 1, 0.05))
ggplot(
data = subset(loans, Investors <= quantile(Investors, 0.99) & !is.na(CreditGrade.ProsperRating)),
aes(x = CreditGrade.ProsperRating, y = LoanOriginalAmount)
) +
geom_jitter(aes(colour = Investors)) +
scale_colour_gradient() +
scale_y_continuous(breaks = seq(0.7, 1, 0.05))
ggplot(
data = subset(loans, !is.na(ListingCategory)),
aes(x = ListingCategory, y = LoanOriginalAmount / Investors)
) +
geom_boxplot() +
scale_y_continuous(breaks = seq(0, max(loans$LoanOriginalAmount), 5000)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
ggplot(
data = subset(loans, Investors <= quantile(Investors, 0.99) & !is.na(ListingCategory)),
aes(x = ListingCategory, y = LoanOriginalAmount)
) +
geom_jitter(aes(colour = Investors)) +
scale_color_gradient() +
scale_y_continuous(breaks = seq(0, max(loans$LoanOriginalAmount), 5000)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
